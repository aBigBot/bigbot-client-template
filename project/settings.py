"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import boto3
import logging.config
from codeguru_profiler_agent import Profiler
from main import Log

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "XXXXX"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


AUTH_USER_MODEL = "core.User"


ALLOWED_HOSTS = ["*"]


CORS_ALLOW_ALL_ORIGINS = True
CORS_EXPOSE_HEADERS = ["access-token"]


# Application definition

INSTALLED_APPS = [
    "admin_interface",
    "colorfield",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "channels",
    "corsheaders",
    "django_extensions",
    "rest_framework",
    "silk",
    "core",
    "bigbot",
    "main",
    "mail",
    "storages",
]

GRAPH_MODELS = {
    "all_applications": True,
    "group_models": True,
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "silk.middleware.SilkyMiddleware",
    "contrib.middleware.KeycloakUserMiddleware",
    "django_middleware_global_request.middleware.GlobalRequestMiddleware",
]

ROOT_URLCONF = "project.urls"
ASGI_APPLICATION = "project.routing.application"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'DEBUG',
#             'class': 'logging.FileHandler',
#             'filename': BASE_DIR+'/debug.log',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['file'],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#     },
# }

LOGGING_CONFIG = None

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "[%(asctime)s] %(levelname)s|%(name)s|%(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {"level": "INFO", "class": "logging.StreamHandler", "formatter": "simple"},
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "project": {
            "handlers": ["console"],
            "level": "INFO",
        },
        "codeguru_profiler_agent": {
            "handlers": ["console"],
            "level": "INFO",
            # Setting this to False to avoid duplication of logs from Profiler(..).start()
            "propagate": False,
        },
    },
}

logging.config.dictConfig(LOGGING)

logger = logging.getLogger(__name__)
logger.info("Custom settings for logging were set.")


SENDGRID_API_KEY = "XXXX"

TRUST_SERVERS = ["127.0.0.1", "10.12.0.12"]

REDIRECT_404 = "https://console.igotbot.com"

os.environ["OAUTHLIB_INSECURE_TRANSPORT"] = "1"

try:
    AWS_REGION = os.environ["AWS_REGION"]
    AWS_ACCESS_KEY = os.environ["AWS_ACCESS_KEY"]
    AWS_SECRET_KEY = os.environ["AWS_SECRET_KEY"]
except KeyError as e:
    print("{} is not an environment variable. Using '.aws/credentials as fallback'".format(e))
    print(
        "For more information check: https://gitlab.com/gitops-big-it-systems-ltd/apps/customers/customer-bigbot-template/-/wikis/Amazon-Polly"
    )

RELEASE_VERSION = os.getenv("VERSION", "undefined")

REST_FRAMEWORK = {}

DATABASE_HOST = os.getenv("DATABASE_HOST", "127.0.0.1")
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ.get("DATABASE_NAME"),
        "USER": os.environ.get("DATABASE_USER"),
        "PASSWORD": os.environ.get("DATABASE_PASSWORD"),
        "HOST": DATABASE_HOST,
        "PORT": "5432",
    }
}
HTTP_PROTOCOL = "https"
STANDALONE_CONSOLE = True
# STATIC_URL = "https://storage.googleapis.com/" + str(os.getenv("BUCKET_NAME")) + "/static/"
SERVER_HOST = os.environ.get("SERVER_HOST", "demo.igotbot.com")
CLOUD = str(os.getenv("CLOUD"))
CODEGURU_PROFILER = str(os.getenv("CODEGURU_PROFILER"))

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

if CLOUD == "gcp":
    STATIC_URL = "https://storage.googleapis.com/" + str(os.getenv("BUCKET_NAME")) + "/static/"
    STATIC_ROOT = os.path.join(BASE_DIR, "public")
elif CLOUD == "aws":
    AWS_ACCESS_KEY_ID = str(os.getenv("AWS_ACCESS_KEY_ID").strip())
    AWS_SECRET_ACCESS_KEY = str(os.getenv("AWS_SECRET_ACCESS_KEY").strip())
    AWS_DEFAULT_REGION = str(os.getenv("AWS_REGION").strip())
    AWS_CODEGURU_PROFILER_TARGET_REGION = str(os.getenv("AWS_REGION").strip())
    AWS_STORAGE_BUCKET_NAME = str(os.getenv("BUCKET_NAME").strip())
    AWS_S3_CUSTOM_DOMAIN = "%s.s3.amazonaws.com" % AWS_STORAGE_BUCKET_NAME
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }
    AWS_LOCATION = "static"
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)
    DEFAULT_FILE_STORAGE = "project.storage_backends.MediaStorage"
    # STATIC_URL = "https://" + str(os.getenv("BUCKET_NAME")) + ".amazonaws.com/static/"
    if CODEGURU_PROFILER == "true":
        # Start CodeGuru Profiler, the logging is set in the LOGGING.
        custom_session = boto3.session.Session(
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            region_name=AWS_DEFAULT_REGION,
        )
        Profiler(
            profiling_group_name=str(os.getenv("PROFILING_GROUP_NAME")),
            region_name=AWS_DEFAULT_REGION,
            aws_session=custom_session,
        ).start()
else:
    print("The AKS cluster is not deployed yet")

# --------------------------------------------------------------------------------------------------
# Silky Settings
# --------------------------------------------------------------------------------------------------


SILKY_AUTHENTICATION = True
SILKY_AUTHORIZATION = True
SILKY_MAX_REQUEST_BODY_SIZE = 1024
SILKY_MAX_RESPONSE_BODY_SIZE = 1024
SILKY_META = True
SILKY_PYTHON_PROFILER = True


# --------------------------------------------------------------------------------------------------
# Development Environment
#
# Add the environment variable "DEVELOPMENT" to your server to use these settings.
# --------------------------------------------------------------------------------------------------


if os.getenv("DEVELOPMENT"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
    HTTP_PROTOCOL = "http"
    STATIC_URL = "/static/"
    SERVER_HOST = "localhost:8050"


# --------------------------------------------------------------------------------------------------
# Local Env
# --------------------------------------------------------------------------------------------------


OAUTH_REDIRECT_URL = HTTP_PROTOCOL + "://" + SERVER_HOST + "/oauth/provider"
PAYMENT_REDIRECT_URL = HTTP_PROTOCOL + "://" + SERVER_HOST + "/payment/redirect"
HTML_RENDER_URL = HTTP_PROTOCOL + "://" + SERVER_HOST + "/html/render"


# --------------------------------------------------------------------------------------------------
# Keycloak Settings
# --------------------------------------------------------------------------------------------------


KEYCLOAK_CONFIG = {
    "KEYCLOAK_ADMIN_PASSWORD": os.getenv("KEYCLOAK_ADMIN_PASSWORD").strip(),
    "KEYCLOAK_ADMIN_USERNAME": os.getenv("KEYCLOAK_ADMIN_USERNAME").strip(),
    "KEYCLOAK_CLIENT_ID": os.getenv("KEYCLOAK_CLIENT_ID").strip(),
    "KEYCLOAK_REALM": os.getenv("KEYCLOAK_REALM").strip(),
    "KEYCLOAK_SERVER_URL": os.getenv("KEYCLOAK_SERVER_URL").strip(),
}
